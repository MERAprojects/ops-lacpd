HALON_TODO: Update this file to reflect Halon changes.
                 VC ENET NOTES ON CYCLONE LACP CODE CHANGES

-------------
 Source Code
-------------

1. The following files are from cyclone/nemo/apps/l2/lacp/maincpu.
   These make up the main LACP protocol logic.

       lacp.h
       lacp_stubs.h
       lacp_support.c
       lacp_support.h
       lacp_task.c
       mlacp.c
       mlacp_fproto.h
       mlacp_main.c
       mlacp_recv.c
       mlacp_send.c
       mux_fsm.c
       periodic_tx_fsm.c
       receive_fsm.c
       selection.c
       stubs.c


   Note that the following files from the same directory are excluded
   for the reason noted:

       mlacp_cli.c  -- Cyclone CLI debug functions.  This could be
                       brought in later to work with our CLI code.

       pgrp_api.h   -- this appears to be outdated code and is not
                       used by anything else in Cyclone.


2. The following header files were brought in mostly as is.  Very
   little effort was made to trim out things that are not needed.
   Directory structure is preserved under "lacp/include" to minimize
   code churn:

     include/nemo/avl.h
     include/nemo/nemo_os.h
     include/nemo/nemo_types.h
     include/nemo/nlib.h

     include/nemo/lacp/lacp_cmn.h
     include/nemo/lacp/lacp_fsm.h
     include/nemo/lacp/mlacp_debug.h

     include/nemo/pm/pm_cmn.h

     include/nemo/protocol/drivers/mlacp.h
     include/nemo/protocol/include/lacp.h
     include/nemo/protocol/lacp/api.h


3. Following Cyclone utility functions are brought in from
   cyclone/nemo/libs/nlib since they're needed by the LACP code:

     utils/avl.c   -- binary tree utility
     utils/dlist.c -- double-linked list utility


4. Cyclone VLAN/Port Manager (VPM) contains lots of information needed
   by LACP.  Instead of pulling in the entire Cyclone VPM source code,
   only those functions needed by LACP is imported.  This includes the
   following files:

       vpm/mvlan_lacp.h
       vpm/mvlan_lacp.c
       vpm/mvlan_sport.h
       vpm/mvlan_sport.c

   Most of the configuration parameters will be stored in the database
   and configured via the CLI.  The Cyclone "Super Port" (sport) is
   brought in with only the minimum needed for LACP purposes.  This
   can be expanded later to include other stuff later as needed.

   Also, instead of LACP process sending messages to VPM process to
   handle LACP and super port work, we'll just simply call the API
   functions directly.  VC Enet module will not bother with spawning a VPM
   process.  All APIs calls should be made from <mlacp_send.c>.


5. The following files are added in order to support various Cyclone
   infrastructure (e.g. inter-process messaging library, timers,
   switch h/w access, etc.) on the VC Enet platform:

       include/lacp_vceth.h
       vceth_if.c


6. The following files are added to allow manual configuration of
   LAGs and port LACP attributes before CLI is ready.  Also added
   automated testing code to work as part of VC Enet automated
   test suite.

       test/debug_config.c
       test/test_lacp.c


------------
 Exclusions
------------

1. Cyclone inter-process messaging library functions are not ported to
   the VC Enet system.  Instead, the LACP daemon will use Unix-domain
   sockets as the means of communications.

   Also, other Cyclone specific infrastructure such as multi-CPU &
   linecards, heartbeat, logging facilities, etc. are not ported.


2. Within LACP, diagnostics and Cyclone CLI-related SHOW functions are
   excluded for now.  We may bring these back later as needed.


---------------------------------
 System configuration attributes
---------------------------------

 1. sys_priority (1 - 65535 (0xFFFF))
 2. sys_ID (system MAC address)


-------------------------------
 Port configuration attributes
-------------------------------

 1. port_key      - actor key, 2 bytes
 2. port_priority - actor priority, 2 bytes
 3. activity      - active or passive in PDU sending
 4. timeout       - long or short time-out
 5. aggregation   - individual or aggregatable
 6. link_state    - up or down
 7. link_speed    - 1000 (for 1Gbe), etc.
 8. lacp_state    - enabled or disabled
 9. MAC address   - we're not using MAC addrs for individual ports.
10. port_id       - 1-65535 (0xFFFF)


--------------------------------
 VC Enet LACP Operational Notes
--------------------------------

The following are some notes regarding assumptions and default
operations of LACP on the VC Enet platform.

By default, when VC Enet module is booted up for the first time, all
ports types are either server for downlink ports or internal for
uplink ports.  When an uplink port is put in an xNet, its type is
changed to external by Allies Manager (AM).

All internal ports are immediately eligible for discovery purposes
(LLDP).  Once a VC Enet module is added into a virtual wiring closet and
LLDP has discovered other VC Enet modules connected to an uplink port,
that port is then eligible for link aggregation.

In other words, VC Enet will try to automatically aggregate as
many known intra-closet ports as possible to maximize bandwidth
capacity among VC Enets.

Also, all external ports that are part of a portgroup, and the
port's redundancy mode is set to 'auto' will also be automatically
aggregated.  If the far end is not running LACP, it'll be put
in a LAG of its own.

VC Enet will automatically create maximum number of LAGs, one for
each port.  This will allow all uplink ports connected to the same
VC Enet module to be aggregated in a LAG.  Of course, this will also mean
that some/many LAG entities will be empty.  This is fine, and
is one of the recommended LAG selection logic defined in
802.3ad spec (section 43.4.14.2).

Note that this is different from Cyclone where they only allow
LAGs with unique actor key, but the difference is minor.


------------------------------------------
  KNOWN ISSUES FROM CONFORMANCE TESTING
------------------------------------------
- Changing port's LACP mode seems to stop LACPD from doing anything with
  the port.  The port does not end up in a LAG of its own as it should.

    >>> FIXED: in lacp_support.c.  Basically, if we try to change any LACP
        configuration property (/ports/portx/lacp), and LACP has already
        been started on that port, then LACPD will forcefully stop the
        old protocol state machine with a disable LACP, and restart the
        protocol with the latest configuration.

- (2.6)  Set up port1 and port2, with each port sending in a different
  ACTOR_SYSTEM ID.  It successfully aggregates when it shouldn't.

    >>> VC Enet module does behave correctly and put each of the port in its own
        LAG.  Question is how much time did Anvil allow before declaring
        that the test has failed due to VC Enet module LAG'ing up the two ports.
        Using LACP test code, while two ports are LAG'd together,
        dynamically changed SYSTEM ID on one of them, it took a total of
        about 7 secs for the LAGs to split up.


- (4.5) Anvil sends ACTOR_KEY=0, and it is not expecting the LAG to form.
  But VC Enet seems to indicate that a LAG is successfully formed.

    >>> FIXED: VC Enet is not rejecting ACTOR_KEY of 0...
    >>> Update: Undid this fix.  Procurve 3400 box uses actor_key of 0,
        so we decided to allow it in order to work with all Procurve boxes
        instead of worrying about ANVL test.

- (4.11) Anvil sends in PORT_ID of 0, and it is not expecting the LAG to
  form. PORT_ID=0 should be rejected, but VC Enet is not?

    >>> FIXED: VC Enet is not rejecting PORT_ID of 0...
    >>> FIXED: VC Enet is sending PORT_ID of 0 (using internal port#)...

- (5.5) Anvil sends in a VLAN tag with VID=1 in the LACPDU.  VC Enet did
  not ignore PDU

    >>> That's the way VC Enet behaves.  VC Enet will not distinguish
        between tagged or untagged PDU (LACP or STP or any other standard
        PDU).  The spec does not explicitly require a tagged BPDU to be
        dropped.

        So we should just run Anvil test where it tests that VC Enet sends
        out an untagged LACPDU.

- (5.20) ....

- Marker testing failing.

    >>> Problem was with ANVL test itself, not VC Enet code.  ANVL is
        incorrectly sending marker protocol frames with couple extra FCS
        bytes.

